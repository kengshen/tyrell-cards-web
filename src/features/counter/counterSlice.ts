import { createSlice, PayloadAction } from '@reduxjs/toolkit';
// import { incrementAsync } from './counterThunkActions';

export enum STATUSES {
  IDLE = 'idle',
  LOADING = 'loading',
  FAILED = 'failed',
}

export interface CounterState {
  value: number;
  // status: 'idle' | 'loading' | 'failed';
  status: STATUSES;
}

const initialState: CounterState = {
  value: 0,
  status: STATUSES.IDLE,
};

export const counterSlice = createSlice({
  name: 'counter',
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1;
    },
    decrement: (state) => {
      state.value -= 1;
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload;
    },
    resetCount: () => initialState,
    setStatus: (state, action: PayloadAction<STATUSES>) => {
      state.status = action.payload;
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  // extraReducers: (builder) => {
  //   builder
  //     .addCase(incrementAsync.pending, (state) => {
  //       state.status = 'loading';
  //     })
  //     .addCase(incrementAsync.fulfilled, (state, action) => {
  //       state.status = 'idle';
  //       state.value += action.payload;
  //     });
  // },
});

export const { increment, decrement, incrementByAmount, resetCount, setStatus } = counterSlice.actions;

export default counterSlice.reducer;
